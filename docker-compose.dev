version: '3.9'

networks:
  logicbreaker:
    driver: bridge
    name: logicbreaker

services:
  laravel_pjt_1:
    build:
      context: ./docker/laravel_pjt_1
      dockerfile: ./Dockerfile
    container_name: laravel_pjt_1
    depends_on:
      - mysql
    ports:
      - 9000:9000
    volumes:
      - ./src/laravel_pjt_1:/var/www/laravel_pjt_1
    networks:
      - logicbreaker

  nuxt_pjt_1:
    build:
      context: ./docker/nuxt_pjt_1
      dockerfile: ./Dockerfile
    container_name: nuxt_pjt_1
    restart: unless-stopped
    depends_on:
      - laravel_pjt_1
    ports:
      - "5000:5000"
      - "24678:24678" # For nuxt_pjt_1 ws
    volumes:
      - ./src/nuxt_pjt_1:/var/www/nuxt_pjt_1
    networks:
      - logicbreaker
    command: 'yarn dev'

  next_pjt_1:
    build:
      context: ./docker/next_pjt_1
      dockerfile: ./Dockerfile
    container_name: next_pjt_1
    restart: unless-stopped
    depends_on:
      - laravel_pjt_1
    ports:
      - "5555:5555"
      # - "24678:24678" # For next_pjt_1 ws
    volumes:
      - ./src/next_pjt_1:/var/www/next_pjt_1
    networks:
      - logicbreaker
    command: 'yarn dev'

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: ./Dockerfile
    container_name: nginx
    ports:
      - "8000:80"
      - "3000:3000"
      - "3333:3333"
      - "4000:4000" # For nuxt_pjt_1 ws
    depends_on:
      - mysql
      - laravel_pjt_1
      - nuxt_pjt_1
    volumes:
      - ./src/laravel_pjt_1:/var/www/laravel_pjt_1
    restart: always
    networks:
      - logicbreaker

  mysql:
    build:
      context: ./docker/mysql
      dockerfile: ./Dockerfile
    container_name: mysql
    restart: unless-stopped
    ports:
      - "${FORWARD_DB_PORT:-3306}:3306"
    volumes:
      - "mysql_volume:/var/lib/mysql"
    networks:
      - logicbreaker

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    depends_on:
      - mysql
    ports:
      - "8888:80"
    environment:
      PMA_HOST: mysql
      UPLOAD_LIMIT: 100000000 # 100 MB (in decimal)
    networks:
      - logicbreaker

  postgres:
    container_name: postgres
    build:
      context: ./docker/postgres
      dockerfile: ./Dockerfile
    volumes:
      - postgres_volume:/data/postgres
    ports:
      - "5500:80"
    restart: unless-stopped
    networks:
      - logicbreaker
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    # environment:
    #   PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
    #   PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    #   PGADMIN_CONFIG_SERVER_MODE: 'False'
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_volume:/var/lib/pgadmin
    ports:
      - "5505:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - logicbreaker

  radis:
    image: redis:4.0.11-alpine
    container_name: radis
    ports:
      - 6379:6379
    networks:
      - logicbreaker

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    networks:
      - logicbreaker

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.2
    container_name: kibana
    restart: always
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
    ports:
      - '5601:5601'
    networks:
      - logicbreaker
    depends_on:
      - elasticsearch

volumes:
  mysql_volume:
    driver: local
  postgres_volume:
    driver: local
  pgadmin_volume:
    driver: local
  elasticsearch:
    driver: local
